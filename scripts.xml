<?xml version="1.0" encoding="UTF-8"?>
<scripts version="3.0">
  <!-- Main Application Controller -->
  <script type="controller" id="app_controller">
    <properties>
      <auto-execute>true</auto-execute>
      <priority>high</priority>
    </properties>
    
    <variables>
      <variable name="currentPage" type="string" value="main"/>
      <variable name="selectMode" type="boolean" value="false"/>
      <variable name="selectedPhotos" type="array" value="[]"/>
      <variable name="darkMode" type="boolean" value="false"/>
      <variable name="cameraActive" type="boolean" value="false"/>
    </variables>

    <functions>
      <!-- Page Navigation -->
      <function name="showPage" params="pageId">
        <code><![CDATA[
          // Hide all pages
          const pages = Scene.root.findByName('*_page');
          pages.forEach(page => {
            page.hidden = true;
          });
          
          // Show target page
          const targetPage = Scene.root.findByName(pageId + '_page');
          if (targetPage) {
            targetPage.hidden = false;
            Variables.currentPage = pageId;
            
            // Update navigation state
            updateNavigation(pageId);
            
            // Handle page-specific logic
            switch(pageId) {
              case 'camera':
                startCamera();
                break;
              case 'history':
                loadPhotos();
                break;
              default:
                stopCamera();
                break;
            }
          }
        ]]></code>
      </function>

      <!-- Navigation Update -->
      <function name="updateNavigation" params="activePageId">
        <code><![CDATA[
          const navItems = Scene.root.findByName('nav_*');
          navItems.forEach(item => {
            const itemId = item.name.replace('nav_', '');
            item.classList.toggle('active', itemId === activePageId);
          });
        ]]></code>
      </function>

      <!-- Camera Functions -->
      <function name="startCamera">
        <code><![CDATA[
          if (!Variables.cameraActive) {
            const cameraPreview = Scene.root.findByName('camera_preview');
            if (cameraPreview) {
              CameraModule.startPreview(cameraPreview);
              Variables.cameraActive = true;
              
              // Show camera controls
              const controls = Scene.root.findByName('camera_controls');
              controls.hidden = false;
            }
          }
        ]]></code>
      </function>

      <function name="stopCamera">
        <code><![CDATA[
          if (Variables.cameraActive) {
            CameraModule.stopPreview();
            Variables.cameraActive = false;
          }
        ]]></code>
      </function>

      <function name="capturePhoto">
        <code><![CDATA[
          if (Variables.cameraActive) {
            CameraModule.capture().then(photo => {
              // Save photo with timestamp
              const timestamp = Date.now();
              const photoData = {
                id: 'photo_' + timestamp,
                data: photo,
                timestamp: timestamp,
                location: LocationModule.getCurrentLocation(),
                metadata: {
                  camera: CameraModule.getCurrentCamera(),
                  filters: FilterModule.getActiveFilters()
                }
              };
              
              // Save to storage
              StorageModule.savePhoto(photoData);
              
              // Show success notification
              showNotification('Photo saved successfully!', 'success');
              
              // Animate capture feedback
              animateCaptureEffect();
            }).catch(error => {
              showNotification('Failed to capture photo', 'error');
            });
          }
        ]]></code>
      </function>

      <function name="switchCamera">
        <code><![CDATA[
          CameraModule.switchCamera().then(() => {
            // Update UI state
            const switchBtn = Scene.root.findByName('switch_camera_btn');
            switchBtn.classList.add('switching');
            
            setTimeout(() => {
              switchBtn.classList.remove('switching');
            }, 300);
          }).catch(error => {
            showNotification('Failed to switch camera', 'error');
          });
        ]]></code>
      </function>

      <!-- Photo Management -->
      <function name="loadPhotos">
        <code><![CDATA[
          StorageModule.getAllPhotos().then(photos => {
            const photoList = Scene.root.findByName('photo_list');
            photoList.innerHTML = '';
            
            photos.forEach(photo => {
              const photoItem = createPhotoListItem(photo);
              photoList.appendChild(photoItem);
            });
          });
        ]]></code>
      </function>

      <function name="createPhotoListItem" params="photo">
        <code><![CDATA[
          return `
            <div class="history-item" data-photo-id="${photo.id}">
              <div class="history-checkbox">
                <input type="checkbox" id="check_${photo.id}">
                <label for="check_${photo.id}"></label>
              </div>
              <div class="history-thumbnail">
                <img src="${photo.data}" alt="Photo">
              </div>
              <div class="history-content">
                <div class="history-info">
                  <span class="history-title">Photo ${photo.id.replace('photo_', '')}</span>
                  <span class="history-date">${formatDate(photo.timestamp)}</span>
                  <span class="history-size">${formatFileSize(photo.size)}</span>
                </div>
              </div>
              <div class="history-actions">
                <button class="action-btn" onclick="favoritePhoto('${photo.id}')">
                  <i class="fas fa-star"></i>
                </button>
                <button class="action-btn" onclick="sharePhoto('${photo.id}')">
                  <i class="fas fa-share"></i>
                </button>
                <button class="action-btn" onclick="showPhotoMenu('${photo.id}')">
                  <i class="fas fa-ellipsis-v"></i>
                </button>
              </div>
            </div>
          `;
        ]]></code>
      </function>

      <!-- Photo Organization -->
      <function name="sortPhotos" params="sortType">
        <code><![CDATA[
          StorageModule.getAllPhotos().then(photos => {
            let sortedPhotos;
            
            switch(sortType) {
              case 'date':
                sortedPhotos = photos.sort((a, b) => b.timestamp - a.timestamp);
                break;
              case 'category':
                sortedPhotos = photos.sort((a, b) => 
                  (a.category || 'Other').localeCompare(b.category || 'Other')
                );
                break;
              case 'location':
                sortedPhotos = photos.sort((a, b) => 
                  (a.location?.name || 'Unknown').localeCompare(b.location?.name || 'Unknown')
                );
                break;
              default:
                sortedPhotos = photos;
            }
            
            // Update UI
            updatePhotoList(sortedPhotos);
            
            // Update sort buttons
            updateSortButtons(sortType);
          });
        ]]></code>
      </function>

      <!-- Settings Management -->
      <function name="updateSetting" params="settingId, value">
        <code><![CDATA[
          const settings = StorageModule.getSettings();
          settings[settingId] = value;
          StorageModule.saveSettings(settings);
          
          // Apply setting immediately
          switch(settingId) {
            case 'dark_mode':
              toggleDarkMode(value);
              break;
            case 'photo_quality':
              CameraModule.setQuality(value);
              break;
            case 'auto_save':
              CameraModule.setAutoSave(value);
              break;
            case 'location_tags':
              LocationModule.setEnabled(value);
              break;
          }
          
          showNotification('Settings updated', 'success');
        ]]></code>
      </function>

      <!-- Dark Mode Toggle -->
      <function name="toggleDarkMode" params="enabled">
        <code><![CDATA[
          Variables.darkMode = enabled;
          const appContainer = Scene.root.findByName('app_container');
          
          if (enabled) {
            appContainer.classList.add('dark-mode');
          } else {
            appContainer.classList.remove('dark-mode');
          }
        ]]></code>
      </function>

      <!-- Notification System -->
      <function name="showNotification" params="message, type">
        <code><![CDATA[
          const notification = Scene.root.findByName('notifications');
          const notificationEl = document.createElement('div');
          notificationEl.className = `notification notification-${type}`;
          notificationEl.innerHTML = `
            <div class="notification-content">
              <i class="fas ${getNotificationIcon(type)}"></i>
              <span>${message}</span>
            </div>
          `;
          
          notification.appendChild(notificationEl);
          
          // Auto remove after 3 seconds
          setTimeout(() => {
            notificationEl.classList.add('notification-exit');
            setTimeout(() => {
              notification.removeChild(notificationEl);
            }, 300);
          }, 3000);
        ]]></code>
      </function>

      <!-- Logout Confirmation -->
      <function name="showLogoutConfirm">
        <code><![CDATA[
          const modal = Scene.root.findByName('logout_confirm');
          modal.hidden = false;
          modal.classList.add('modal-show');
        ]]></code>
      </function>

      <function name="confirmLogout">
        <code><![CDATA[
          // Clear user data
          StorageModule.clearUserData();
          
          // Reset app state
          Variables.currentPage = 'main';
          Variables.selectedPhotos = [];
          Variables.selectMode = false;
          
          // Show main page
          showPage('main');
          
          // Hide modal
          const modal = Scene.root.findByName('logout_confirm');
          modal.hidden = true;
          modal.classList.remove('modal-show');
          
          showNotification('Logged out successfully', 'info');
        ]]></code>
      </function>

      <!-- Utility Functions -->
      <function name="formatDate" params="timestamp">
        <code><![CDATA[
          const date = new Date(timestamp);
          const now = new Date();
          const diffTime = Math.abs(now - date);
          const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
          
          if (diffDays === 0) {
            return 'Today';
          } else if (diffDays === 1) {
            return 'Yesterday';
          } else if (diffDays < 7) {
            return `${diffDays} days ago`;
          } else {
            return date.toLocaleDateString();
          }
        ]]></code>
      </function>

      <function name="formatFileSize" params="bytes">
        <code><![CDATA[
          if (!bytes) return '0 B';
          const sizes = ['B', 'KB', 'MB', 'GB'];
          const i = Math.floor(Math.log(bytes) / Math.log(1024));
          return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
        ]]></code>
      </function>

      <function name="getNotificationIcon" params="type">
        <code><![CDATA[
          const icons = {
            success: 'fa-check-circle',
            error: 'fa-exclamation-circle',
            warning: 'fa-exclamation-triangle',
            info: 'fa-info-circle'
          };
          return icons[type] || icons.info;
        ]]></code>
      </function>
    </functions>

    <!-- Event Listeners -->
    <events>
      <event type="onSceneLoad">
        <code><![CDATA[
          // Initialize app
          showPage('main');
          
          // Load user settings
          const settings = StorageModule.getSettings();
          if (settings.dark_mode) {
            toggleDarkMode(true);
          }
          
          // Setup navigation
          const navItems = Scene.root.findByName('nav_*');
          navItems.forEach(item => {
            const pageId = item.name.replace('nav_', '');
            item.onclick = () => showPage(pageId);
          });
        ]]></code>
      </event>

      <event type="onCameraPermission" granted="true">
        <code><![CDATA[
          // Enable camera functionality
          const cameraNav = Scene.root.findByName('nav_camera');
          cameraNav.disabled = false;
        ]]></code>
      </event>

      <event type="onLocationPermission" granted="true">
        <code><![CDATA[
          // Enable location tagging
          LocationModule.startTracking();
        ]]></code>
      </event>
    </events>
  </script>

  <!-- Filter Effects Controller -->
  <script type="effect" id="filter_controller">
    <functions>
      <function name="applyFilter" params="filterId">
        <code><![CDATA[
          FilterModule.clearAll();
          
          switch(filterId) {
            case 'filter_vintage':
              FilterModule.apply('vintage', { intensity: 0.8 });
              break;
            case 'filter_beauty':
              FilterModule.apply('beauty', { smooth: 0.6, brighten: 0.3 });
              break;
            case 'filter_ar_cat':
              ARModule.loadEffect('cat_ears');
              break;
            case 'filter_ar_dog':
              ARModule.loadEffect('dog_face');
              break;
            default:
              // No filter
              break;
          }
        ]]></code>
      </function>
    </functions>
  </script>

  <!-- Animation Controller -->
  <script type="animation" id="animation_controller">
    <functions>
      <function name="animateCaptureEffect">
        <code><![CDATA[
          const captureBtn = Scene.root.findByName('capture_btn');
          captureBtn.classList.add('capturing');
          
          // Flash effect
          const flash = Scene.root.findByName('camera_flash');
          flash.hidden = false;
          flash.opacity = 1;
          
          Animation.animate(flash, {
            opacity: 0
          }, 200).then(() => {
            flash.hidden = true;
            captureBtn.classList.remove('capturing');
          });
        ]]></code>
      </function>

      <function name="animatePageTransition" params="from, to">
        <code><![CDATA[
          const fromPage = Scene.root.findByName(from + '_page');
          const toPage = Scene.root.findByName(to + '_page');
          
          // Slide transition
          Animation.animate(fromPage, {
            transform: 'translateX(-100%)',
            opacity: 0
          }, 300).then(() => {
            fromPage.hidden = true;
            toPage.hidden = false;
            toPage.style.transform = 'translateX(100%)';
            
            Animation.animate(toPage, {
              transform: 'translateX(0)',
              opacity: 1
            }, 300);
          });
        ]]></code>
      </function>
    </functions>
  </script>
</scripts>